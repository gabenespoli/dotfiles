#!/bin/bash

# pdoc: pandoc wrapper for md>docx and docx>md
# usage: pdoc inputfile [options]
# example input: pdoc mypaper.md
# example output: mypaper.md.docx
# author: gabenespoli@gmail.com
# requires:
#   brew install pandoc pandoc-citeproc
#   pip install pantable pandoc-fignos pandoc-tblnos


## defaults
args=""
bibtexfile="$HOME/.pandoc/library.bib"
cslfile="$HOME/.pandoc/apa-no-doi-no-issue.csl"
refdocx="$HOME/.pandoc/apa.docx"
open_after_convert=false
output_adjustments=true

## parse filename and set output type
inputFile="$1"
shift
inputExt=".${inputFile##*.}"
if [ "$inputExt" == '.md' ]; then
    inputType="markdown"
    outputType="docx"
    outputExt=".docx"
elif [ "$inputExt" == '.docx' ]; then
    inputType="docx"
    outputType="markdown"
    outputExt=".md"
else
    echo "Invalid filetype."
    return
fi
outputFile=${inputFile}${outputExt}

## prepare input
case "$inputType" in
    md|markdown )
        # don't want to change original .md file
        tmpFile="${inputFile}.tmp"
        cp "$inputFile" "$tmpFile"
        inputFile="$tmpFile" # set temp file name to filename

        # replace critic highlights with custom character style with highlights that are in the ref docx
        perl -pi -e 's/(\{\=\=.*?\=\=\})/\<span\ custom\-style\=\"CriticHighlight\"\>\1\<\/span\>/g' "$inputFile"
        perl -pi -e 's/(\{\>\>.*?\<\<\})/\<span\ custom\-style\=\"CriticComment\"\>\1\<\/span\>/g' "$inputFile"
        perl -pi -e 's/(\{\-\-.*?\-\-\})/\<span\ custom\-style\=\"CriticDeletion\"\>\1\<\/span\>/g' "$inputFile"
        perl -pi -e 's/(\{\+\+.*?\+\+\})/\<span\ custom\-style\=\"CriticInsertion\"\>\1\<\/span\>/g' "$inputFile"
        perl -pi -e 's/(^TODO.*)\n/\<span\ custom\-style\=\"TODO\"\>\1\<\/span\>\n/g' "$tmpFile"
        # TODO delete critic parts marked for deletion? optionally?

        # add args to pandoc call (ref docx, tables and figures)
        args="${args} --reference-docx=${refdocx}" # reference file for styles
        args="${args} --filter pantable --filter pandoc-fignos --filter pandoc-tablenos" # figure and table numbers
        ;;

    docx )
        args="${args} --wrap=none --atx-headers --extract-media=docxmedia --track-changes=all --reference-location=block"
        ;;
esac

## user-defined
for arg in $@; do
    case "$arg" in
        toc )
            args="${args} --toc" ;;
        refs|ref )
            args="${args} --filter pandoc-citeproc --bibliography=${bibtexfile} --csl=${cslfile}" ;;
        open )
            open_after_convert=true ;;
        noadj )
            output_adjustments=false ;;
    esac
done

## call pandoc
allargs="-f $inputType $inputFile -t $outputType -o $outputFile --smart --standalone $args"
echo "pandoc "$allargs
pandoc $allargs

## adjust output
if [ $output_adjustments == true ]; then
    case "$outputType" in
        md|markdown )
            echo "Making adjustments for markdown output..."

            # possible new workflow
            # 1. first take care of insertions and deletions
            # 2. comments with both start and end
            # 3. remove comment-end stems

            ### insertions and deletions
            # first match a space before to avoid double spaces 
            # word doesn't include the deleted space in the deletion, and instead uses smart spacing itself
            # this means we have to do some smart spacing ourselves
            # this will break if there is a "]" (closing square bracket) in the insertion/deletion
            perl -pi -e 's/\ \[([^\]]*)\]\{\.deletion[^\}]*\}//g' "$outputFile"
            perl -pi -e 's/\[([^\]]*)\]\{\.deletion[^\}]*\}//g' "$outputFile"
            perl -pi -e 's/\[([^\]]*)\]\{\.insertion[^\}]*\}/\1/g' "$outputFile"

            ### highlights and comments
            # (capture 1 is the comment; capture 2 is the author; capture 3 is the highlighted text)
            # perl -pi -e 's/\[([^\]]*)\]\{\.comment-start.*?author="(.*?)"[^\}]*\}(.*?)\[\]\{\.comment-end[^\}]*\}/{\=\=\3\=\=\}\{\>\>\2\:\ \1\<\<\}/g' "$outputFile"

            # match comment-start and comment-end separately
            # keep the id so the start and end can be matched manually (or by code later)
            # this is because 
            # - nested comments are a problem, I don't think they can be properly matched with regex
            # - comments on deleted text show up as stems (either only comment-start or only comment-end, with no matching id)
            # comment-start captures: \1=comment, \2=id, \3=author, \4=date/time
            perl -pi -e 's/\[([^\]]*)\]\{\.comment-start\ id="([^"]*)"\ author="([^"]*)"\ date="([^"]*)"\}/\{>>\3\ \(\2\):\ \1<<\}\{\=\=/g' "$outputFile"
            # comment-end captures: \1=id
            perl -pi -e 's/\[\]\{\.comment-end\ id="([^"]*)"\}/\=\=\}\{>>\(\1\)<<\}/g' "$outputFile"

            ### misc puncuation
            # replace backslash-escaped square brackets with plain square brackets
            # (this is so that pandoc citations are interpreted as code and not text)
            perl -pi -e 's/\\\[/\[/g' "$outputFile"
            perl -pi -e 's/\\\]/\]/g' "$outputFile"

            # replace &lt; and &gt; with < and >
            perl -pi -e 's/\&lt\;/\</g' "$outputFile"
            perl -pi -e 's/\&gt\;/\>/g' "$outputFile"

            # replace curly apostrophes and quotes with straight ones
            perl -pi -e 's/”/"/g' "$outputFile"
            perl -pi -e 's/“/"/g' "$outputFile"
            perl -pi -e "s/’/'/g" "$outputFile"
            perl -pi -e "s/‘/'/g" "$outputFile"

            # replace en and em dashes with pandoc multi-hyphens
            perl -pi -e 's/–/--/g' "$outputFile"
            perl -pi -e 's/—/---/g' "$outputFile"

            # replace elipsis with dots
            perl -pi -e 's/…/.../g' "$outputFile"

            ### replace in-text figure numbers
            # this is for the fignos and tablenos pandoc extensions
            perl -pi -e 's/\[\d+?\]\(#fig:(.*?)\)/\@fig:\1/g' "$outputFile"
            perl -pi -e 's/\[\d+?\]\(#tbl:(.*?)\)/\@tbl:\1/g' "$outputFile"
            perl -pi -e 's/(\[\d+?\]\(#tables\))/\{\=\=\1\=\=\}\{\>\>needs linking \(\@tbl:name\)\<\<\}/g' "$outputFile"

            ### replace multiple spaces with one
            perl -pi -e 's/\s{2,}/\ /g' "$outputFile"

            ;;
        docx )
            #rm "$tmpFile"
            ;;
    esac
fi

## open the new file
if [ $open_after_convert == true ]; then
    open $outputFile
fi

