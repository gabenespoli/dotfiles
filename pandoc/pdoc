#!/bin/bash

# pdoc: pandoc wrapper for md>docx and docx>md
# usage: pdoc inputfile [options]
# example input: pdoc mypaper.md
# example output: mypaper.md.docx
# author: gabenespoli@gmail.com

# parse input
filename="$1"
shift
extension=".${filename##*.}"
if [ "$extension" == '.md' ]; then
    outputType="docx"
elif [ "$extension" == '.docx' ]; then
    outputType="md"
else
    echo "invalid filetype"
    return
fi
outputfile=${filename}.${outputType}

# defaults
args=""
bibtexfile="$HOME/.pandoc/library.bib"
cslfile="$HOME/.pandoc/apa-no-doi-no-issue.csl"
refdocx="$HOME/.pandoc/apa.docx"
open_after_convert=false

# loop input and set args
for arg in $@
do
    case "$arg" in
        toc )
            args="${args} --toc" ;;
        refs|ref )
            args="${args} --filter pandoc-citeproc --bibliography=${bibtexfile} --csl=${cslfile}" ;;
        open )
            open_after_convert=true ;;
    esac
done

# create a temp file so that changes may be made to the file before converting it
tmpfile=".tmp_"$filename
cp "$filename" "$tmpfile"
outputfile=${filename}.${outputType}

# stuff specific to docx
if [ $outputType == "docx" ]; then
    # add word character styles to critic markdown tags
    perl -pi -e 's/\{\=\=(.*?)\=\=\}/\{\=\=\<span\ custom\-style\=\"CriticHighlight\"\>\1\<\/span\>\=\=\}/g' "$tmpfile"
    perl -pi -e 's/\{\>\>(.*?)\<\<\}/\{\>\>\<span\ custom\-style\=\"CriticComment\"\>\1\<\/span\>\<\<\}/g' "$tmpfile"
    perl -pi -e 's/\{\-\-(.*?)\-\-\}/\{\-\-\<span\ custom\-style\=\"CriticDeletion\"\>\1\<\/span\>\-\-\}/g' "$tmpfile"
    perl -pi -e 's/\{\+\+(.*?)\+\+\}/\{\+\+\<span\ custom\-style\=\"CriticInsertion\"\>\1\<\/span\>\+\+\}/g' "$tmpfile"
    perl -pi -e 's/(^TODO.*)\n/\<span\ custom\-style\=\"TODO\"\>\1\<\/span\>\n/g' "$tmpfile"
#TODO delete critic parts marked for deletion? optionally?
    #perl -pi -e 's/(^TODO.*)\n/\<span\ custom\-style\=\"TODO\"\>\1\<\/span\>\n/g' "$tmpfile"
    # reference file for styles
    args="${args} --reference-docx=${refdocx}"
fi

# actual call to pandoc
pandoc \
-f markdown $tmpfile \
-t $outputType -o $outputfile \
--smart \
--standalone \
$args

# remove the temp file
rm $tmpfile

# open the new file
if [ $open_after_convert == true ]; then
    open $outputfile
fi

