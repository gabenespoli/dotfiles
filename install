#!/bin/bash

# Gabe Nespoli (gabenespoli@gmail.com)
# this script is intended to be run via curl
# i.e. don't need to have git to first clone the dotfiles repo

# Do this first {{{1
# 1. update with software update
#    via command line: sudo softwareupdate -ia --verbose
# 2. make sure xcode command line tools are installed
#    to install: xcode-select --install
# 3. Install fonts
#    - https://github.com/IBM/plex
#    - https://github.com/tonsky/FiraCode

# Homebrew {{{1
echo "-- Installing Homebrew..."
[ -z "$(which brew)" ] &&
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

echo "-- Installing Homebrew packages..."
brew install bash readline coreutils findutils grep gnu-sed gawk wget
brew install tmux neovim lf git ctags tree jq cloc
brew install tig bat ag ripgrep
brew install reattach-to-user-namespace openssh openssl
brew install pandoc pandoc-citeproc pandoc-crossref basictex

brew cask install xquartz
brew cask install alacritty
brew cask install spectacle
brew cask install karabiner-elements

# bash {{{1
echo "-- Adding the new bash shell to the list of allowed shells"
sudo bash -c 'echo /usr/local/bin/bash >> /etc/shells' # Prompts for password
chsh -s /usr/local/bin/bash # Change to the new shell, prompts for password

# TODO: setup terminfo with italics (should this be moved out of mac-only? #{{{1

# dotfiles (now that we have git) {{{1
echo "-- Cloning dotfiles and creating symlinks..."
DOTFILES="$HOME"/dotfiles
[ -e "$DOTFILES" ] && mv "$DOTFILES" "$DOTFILES".bak
git clone https://github.com/gabenespoli/dotfiles "$DOTFILES"
BAKDIR="$DOTFILES"/.bak
mkdir -pv "$BAKDIR"

for rc in *rc *profile *cfg tmux.conf gitconfig; do
  [ -e "$HOME"/."$rc" ] && mv -v "$HOME"/."$rc" "$BAKDIR"/"$rc"
  ln -sfv "$DOTFILES"/"$rc" "$HOME"/."$rc"
done

for cfg in karabiner ranger lf pudb; do
  [ -e "$HOME"/.config/"$cfg" ] && mv -v "$HOME"/.config/"$cfg" "$BAKDIR"/"$cfg"
  ln -sfv "$DOTFILES"/config/"$cfg" "$HOME"/.config
done

mkdir -pv "$HOME"/.ipython/profile_default
ln -sfv "$DOTFILES"/ipython/profile_default/ipython_config.py \
  "$HOME"/.ipython/profile_default/ipython_config.py

# git {{{1
if [ ! -e ~/.git-completion.bash ]; then
  curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash
fi

git config --global user.email "gabenespoli@gmail.com"
git config --global user.name "Gabe Nespoli"

git clone https://github.com/magicmonty/bash-git-prompt.git ~/.bash-git-prompt --depth=1

# tmux {{{1
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
tmux source-file ~/.tmux.conf

# vim {{{1
echo "-- Linking vim files and directories..."
[ -e "$HOME"/.vim ] && mv -v "$HOME"/.vim "$BAKDIR"/vim
mkdir -pv "$HOME"/.vim/autoload
curl -fLo "$HOME"/.vim/autoload/plug.vim \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

for folder in ftdetect ftplugin spell syntax; do
  ln -sfv "$DOTFILES"/vim/"$folder" "$HOME"/.vim/"$folder"
done

# nvim
mkdir -pv "$HOME"/.config/nvim/autoload
ln -sf "$DOTFILES"/vimrc "$HOME"/.config/nvim/init.vim
ln -sf "$HOME"/.vim/autoload/plug.vim "$HOME"/.config/nvim/autoload/

nvim +PlugInstall +qall

# python {{{1
echo "-- Setting up python and pyenv..."

# Mac
if [ "$(uname)" == "Darwin" ]; then
  # https://github.com/pyenv/pyenv/wiki
  brew install openssl readline sqlite3 xz zlib
  sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /
  brew install pyenv pyenv-virtualenv

# Linux
else
  sudo apt-get update
  sudo apt-get install --no-install-recommends make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
  git clone https://github.com/pyenv/pyenv.git ~/.pyenv

fi

eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# install versions of python
pyenv install 2.7.15
pyenv install 3.7.7
pyenv install miniconda3-latest

# envs for neovim
pyenv virtualenv 2.7.15 neovim-2.7.15
pyenv activate neovim-2.7.15
pip install --upgrade pip
pip install neovim pynvim
pyenv deactivate

pyenv virtualenv 3.7.7 neovim-3.7.7
pyenv activate neovim-3.7.7
pip install --upgrade pip
pip install neovim pynvim python-language-server jedi==0.15.2
pyenv deactivate

# env for data science
pip install --upgrade pip
conda install pandas matplotlib seaborn bokeh scikit-learn \
  ipython jupyter jupyterlab sphinx \
  flake8 black pytest
pip install pyspark-stubs databricks-cli

# envs for databricks (python 3.5.2, spark 2.4.0, databricks 5.1)
pyenv shell miniconda3-latest

conda create -y --name spark python=3.5
conda activate spark
pip install --upgrade pip
conda install pyspark ipython jupyter pytest flake8
pip install pyspark-stubs
conda deactivate

conda create -y --name spark-databricks python=3.5
conda activate spark-databricks
pip install --upgrade pip
pip install --upgrade databricks-connect==5.1.*
cp "$HOME"/lib/databricks-connect-jars/*.jar "$(databricks-connect get-jar-dir)"
conda deactivate

pyenv shell --unset

# Spectacle.app
echo "Setting shortcuts for Spectacle.app..."
[ -e "$HOME"/Library/Application\ Support/Spectacle/Shortcuts.json ] && \
  mv -v "$HOME"/Library/Application\ Support/Spectacle/Shortcuts.json "$DOTFILES"/bak/spectacle.json
cp -r "$DOTFILES"/init/spectacle.json "$HOME"/Library/Application\ Support/Spectacle/Shortcuts.json 2>/dev/null
