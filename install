#!/bin/bash

# Gabe Nespoli (gabenespoli@gmail.com)
# this script is intended to be run via curl
# i.e. don't need to have git to first clone the dotfiles repo

# Do this first {{{1
# 1. update with software update
#    via command line: sudo softwareupdate -ia --verbose
# 2. make sure xcode command line tools are installed
#    to install: xcode-select --install
# 3. Install fonts
#    - https://github.com/IBM/plex
#    - https://github.com/googlefonts/dm-mono

# Homebrew {{{1
echo "-- Installing Homebrew..."
[ -z "$(which brew)" ] &&
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

echo "-- Installing Homebrew packages..."
brew install git
brew install bash readline coreutils findutils grep gnu-sed gawk wget
brew install tmux neovim lf git ctags tree jq cloc
brew install bat ag ripgrep fzf npm
brew install reattach-to-user-namespace openssh openssl
brew install pandoc pandoc-citeproc pandoc-crossref basictex
brew install sqlparse

brew cask install alacritty
brew cask install spectacle
brew cask install karabiner-elements

npm install -g pyright
npm install -g bash-language-server
npm install -g vim-language-server
npm install -g yaml-language-server

# bash {{{1
echo "-- Adding the new bash shell to the list of allowed shells"
sudo bash -c 'echo /usr/local/bin/bash >> /etc/shells' # Prompts for password
chsh -s /usr/local/bin/bash # Change to the new shell, prompts for password

# TODO: setup terminfo with italics (should this be moved out of mac-only? #{{{1

# dotfiles (now that we have git) {{{1
echo "-- Cloning dotfiles and creating symlinks..."
DOTFILES="$HOME"/dotfiles
[ -e "$DOTFILES" ] && mv "$DOTFILES" "$DOTFILES".bak
git clone https://github.com/gabenespoli/dotfiles "$DOTFILES"
BAKDIR="$DOTFILES"/.bak
mkdir -pv "$BAKDIR"

for rc in inputrc bashrc bash_profile tmux.conf gitconfig; do
  [ -e "$HOME"/."$rc" ] && mv -v "$HOME"/."$rc" "$BAKDIR"/"$rc"
  ln -sfv "$DOTFILES"/"$rc" "$HOME"/."$rc"
done

for cfg in karabiner lf pudb; do
  [ -e "$HOME"/.config/"$cfg" ] && mv -v "$HOME"/.config/"$cfg" "$BAKDIR"/"$cfg"
  ln -sfv "$DOTFILES"/config/"$cfg" "$HOME"/.config
done

mkdir -pv "$HOME"/.ipython/profile_default
ln -sfv "$DOTFILES"/ipython/profile_default/ipython_config.py \
  "$HOME"/.ipython/profile_default/ipython_config.py

# git {{{1
if [ ! -e ~/.git-completion.bash ]; then
  curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash
fi

git config --global user.email "gabenespoli@gmail.com"
git config --global user.name "Gabe Nespoli"

git clone https://github.com/magicmonty/bash-git-prompt.git ~/.bash-git-prompt --depth=1

# tmux {{{1
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
tmux source-file ~/.tmux.conf

# n/vim {{{1
# backup existing config if exists
[ -e "$HOME"/.config/nvim ] && mv -v "$HOME"/.config/nvim "$BAKDIR"/.config/nvim
[ -e "$HOME"/.local/share/nvim ] && mv -v "$HOME"/.local/share/nvim "$BAKDIR"/.local/share/nvim

# symlink config files & folders
ln -sfv "$DOTFILES"/vim/init.vim "$HOME"/.config/nvim/init.vim
for folder in colors ftdetect ftplugin syntax; do
  ln -sfv "$DOTFILES"/vim/"$folder" "$HOME"/.config/nvim/"$folder"
done

# install plugins
nvim +PlugInstall +qall

# Spectacle.app  {{{1
echo "Setting shortcuts for Spectacle.app..."
[ -e "$HOME"/Library/Application\ Support/Spectacle/Shortcuts.json ] && \
  mv -v "$HOME"/Library/Application\ Support/Spectacle/Shortcuts.json "$DOTFILES"/bak/spectacle.json
cp -r "$DOTFILES"/init/spectacle.json "$HOME"/Library/Application\ Support/Spectacle/Shortcuts.json 2>/dev/null

# python with conda {{{1
# https://docs.conda.io/projects/conda/en/latest/user-guide/install/macos.html
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O ~/miniconda.sh
bash ~/miniconda.sh -b -p $HOME/miniconda
conda init
conda update -n base -c defaults conda

# base 3.7 env
conda create -y -n base37 python=3.7.10
conda activate base37
conda install -c conda-forge -y \
  flake8 mypy pydocstyle black isort pytest python-language-server jedi \
  numpy pandas pyarrow matplotlib seaborn plotly dash \
  scikit-learn statsmodels xgboost catboost lightgbm \
  python-dotenv sqlalchemy pyodbc \
  ipython jupyter jupyterlab
conda install -c conda-forge -c plotly -y jupyter-dash
pip install jupytext jupyterlab_execute_time
jupyter labextension install jupyterlab-plotly jupyterlab-dash plotlywidget
jupyter lab build

# base env
conda activate base
conda install -c conda-forge -y \
  flake8 mypy pydocstyle black isort pytest \
  numpy pandas pyarrow matplotlib seaborn dash \
  scikit-learn statsmodels xgboost catboost lightgbm \
  python-language-server jedi \
  ipython jupyter jupyterlab \
  python-dotenv sqlalchemy pyodbc \
  sphinx sphinx-rtd-theme \
conda install -c conda-forge -c plotly -y jupyter-dash
pip install jupytext jupyterlab_execute_time
pip install pyspark-stubs databricks-cli
conda install -c conda-forge python-kaleido

# plotly support in jupyter lab
jupyter labextension install jupyterlab-plotly jupyterlab-dash plotlywidget

# rebuild to activate jupyter-dash extension
jupyter lab build

# env for neovim
conda create -y -n neovim3
conda activate neovim3
conda install -y \
  flake8 mypy pydocstyle black isort \
  python-language-server jedi
pip install neovim pynvim

conda create -y -n neovim2 python=2.7.15
conda activate neovim2
pip install neovim pynvim
